/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}html{font-size:62.5%}body{background:linear-gradient(90deg,#e7c7c8,#f2e4e3);background-repeat:repeat;background-size:cover;width:100%;height:100%}p{font-size:1.8em;font-family:Futura PT;font-weight:300;line-height:1.4}h1,h2,h3,h4,h5,h6{font-family:alana,sans-serif}h1{font-size:3.8em;padding-bottom:.5rem}@media only screen and (min-width:56.25em){h1{font-size:4.8em}}@media only screen and (min-width:75em){h1{font-size:6.8em}}h2{font-size:3.8em;font-family:alana,sans-serif;margin:0;padding-bottom:15px}@media only screen and (min-width:56.25em){h2{font-size:4.8em}}@media only screen and (min-width:75em){h2{font-size:6.8em}}h3{font-size:2.8em}@media only screen and (min-width:56.25em){h3{font-size:3.2em}}@media only screen and (min-width:75em){h3{font-size:5em;margin-bottom:3rem}}h4{font-size:3.8em}@media only screen and (min-width:56.25em){h4{font-size:4.8em}}@media only screen and (min-width:75em){h4{font-size:6.8em}}h5{font-size:3.8em}@media only screen and (min-width:56.25em){h5{font-size:4.8em}}@media only screen and (min-width:75em){h5{font-size:6.8em}}h6{font-size:3.8em}@media only screen and (min-width:56.25em){h6{font-size:4.8em}}@media only screen and (min-width:75em){h6{font-size:6.8em}}.blog-page{margin-top:4.5rem}.blog-body{position:relative;height:auto;background-color:#fff;box-shadow:0,0,0,.5;margin:auto;padding:0 1rem 1px;min-height:-webkit-fill-available;min-height:-moz-available;min-height:fill;max-width:75rem}@media only screen and (min-width:56.25em){.blog-body{max-width:94rem}}.blog-body__underline{font-family:Futura PT,sans-serif;font-weight:300;font-size:3em;border-bottom:1px solid #c1a87d}.blog-body__underline a{text-decoration:none;color:#000;transition:color .2s ease-out}.blog-body__underline a:hover{color:#c1a87d}.blog-body__img{width:500px;height:auto;margin-top:-2rem}.blog-body__img img{max-width:100%;height:auto}.blog-body__text{max-width:65.6rem;margin:4rem auto}.blog-body__text h2{font-size:2rem;font-family:Futura PT,sans-serif;font-weight:300}@media only screen and (min-width:37.5em){.blog-body__text h2{font-size:3rem}}.blog-body__text h2 a{text-decoration:none;color:#000;transition:color .2s ease-out}.blog-body__text h2 a:hover{color:#c1a87d}.blog-body__tags{display:flex;justify-content:space-between;align-items:center;font-family:Futura PT,sans-serif;margin-top:.5rem}.blog-body__tags__author,.blog-body__tags__date{font-size:1.5em;color:#c1a87d;margin:0;font-style:italic}.blog-body__tags a{text-decoration:none;color:#000;transition:color .2s ease-out}.blog-body__tags a:hover{color:#c1a87d}.blog-head{text-align:center}.blog-head__main{color:#c1a87d;text-align:center;margin:0;padding-top:4rem}.blog-head__sub{color:#c1a87d;text-align:center;font-size:2em;font-family:Futura PT,sans-serif;font-weight:300;margin:-.6rem 0 0}@media only screen and (min-width:56.25em){.blog-head__sub{font-size:2.4em}}@media only screen and (min-width:75em){.blog-head__sub{font-size:2.7em}}.blog-head__image{position:absolute;display:none;z-index:0}@media only screen and (min-width:37.5em){.blog-head__image{top:0;display:inherit;max-width:20vh;left:0}}@media only screen and (min-width:56.25em){.blog-head__image{top:0;left:0}}@media only screen and (min-width:75em){.blog-head__image{max-width:30vh;left:-15%}}.blog-inner-page{padding:1px}@media only screen and (min-width:37.5em){.blog-inner-page{padding-top:2rem}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
